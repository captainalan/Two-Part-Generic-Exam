{"version":3,"sources":["QuestionList.js","FreeResponseEssay.js","ScoreBox.js","Exam.js","App.js","serviceWorker.js","index.js"],"names":["QuestionList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","choiceSelected","bind","assertThisInitialized","qid","responses","_this2","questions","react_default","a","createElement","map","item","index","QuestionList_Question","key","selected","question","correct","choices","choiceHandler","choice","selectChoice","showingScore","React","Component","Question","_this3","i","_this4","className","Problem","questionText","choice_text","QuestionList_Choice","onClick","Choice","_this$props","children","type","FreeResponseEssay","state","essay_submitted","value","initial_text","handleClick","handleChange","handleBlur","handleSubmit","event","setState","target","preventDefault","onSubmit","split","length","onChange","onBlur","rows","cols","id","name","wordCount","ScoreBox","score","scoreShowingp","calculateScore","toggleShowScore","forEach","currentValue","my_score","total_possible","keys","reset","toFixed","essay","Exam","resetExam","questionIndex","newResponses","assign","src_QuestionList","src_FreeResponseEssay","essayText","src_ScoreBox_0","App","src_Exam_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c85de6a4.chunk.js","sourcesContent":["import React from 'react';\nimport './ScoreBox.css';\n\nclass QuestionList extends React.Component {\n\n    choiceSelected(qid) {\n        // qid is something like 'q1'; returns first found response to \n        // this question (e.g. 0, 1). Otherwise, returns null\n        if (this.props.responses && (qid in this.props.responses)) {\n            return this.props.responses[qid];\n        }\n        return null;\n    }\n    constructor(props) {\n        super(props);\n        this.choiceSelected = this.choiceSelected.bind(this);\n    }\n\n    render() {\n        const { questions } = this.props; // Maybe get responses props here too\n        return(\n            <div>\n                {questions.map((item,index) =>\n                    <Question \n                        key={'q' + [index]} /* Look for a better solution than this */\n                        selected={this.choiceSelected('q' + [index])}\n                        question={item.question}\n                        correct={item.correct}\n                        choices={item.choices}\n                        choiceHandler={(choice) => this.props.selectChoice(index,choice)}\n                        showingScore={this.props.showingScore}\n                    />\n                )}\n            </div>\n        )\n    }\n}\n\n// Each multiple choice question consists of a problem statement and\n// answer choices.\nclass Question extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.choiceHandler = this.choiceHandler.bind(this);\n    }\n\n    choiceHandler(i){ \n        this.props.choiceHandler(i);\n    }\n\n    render() {\n        return (\n            <div className='Question'>\n\n                <Problem questionText={this.props.question}/>\n                {/* Insert code here to render choices*/}\n\n                {this.props.choices.map((choice_text, i) =>\n                    <Choice \n                        key={choice_text} // Better than using indices?\n                        className={i === this.props.selected ? 'Selected' : 'Choice'}\n                        onClick={ () => this.choiceHandler(i) }\n                    >\n                        {choice_text}\n                    </Choice>\n                )}\n                <div className={this.props.showingScore ? \"Answer\" : \"hidden\" }>\n                    {this.props.selected === this.props.correct ? \n                        <p className=\"Success\">You're right!</p> \n                        : <p className=\"Failure\">The correct answer is: \"{this.props.choices[this.props.correct]}\"</p> }\n                    \n                </div>\n            </div>\n        )\n    }\n}\n\n// Statement of problem for multiple choice Question\nfunction Problem(props) {\n    return (<div><p>{props.questionText}</p></div>);\n}\n\n// Answer choice for multiple choice Question\nclass Choice extends React.Component {\n\n    render() {\n        const {\n            className,\n            children,\n            onClick,\n        } = this.props;\n        return (\n            <button \n                className={className}\n                type=\"button\"  \n                onClick={onClick}\n            >\n                {children}\n            </button>     \n        );\n    }\n}\n\nexport default QuestionList;","import React from 'react';\nimport './ScoreBox.css';\n\nclass FreeResponseEssay extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            essay_submitted: false,\n        };\n\n        this.state.value = this.props.initial_text;\n\n        this.handleClick = this.handleClick.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleClick(event) {\n        // Clear the original prompt text when user clicks text area\n        if (this.state.value === this.props.initial_text){\n            this.setState({value: ''});\n        }\n    }\n\n    handleBlur(event) {\n        if (this.state.value === ''){\n            this.setState({value: this.props.initial_text});\n        }\n    }\n\n    handleChange(event) {\n        this.setState({value: event.target.value});\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.props.onSubmit(this.state.value); // Send essay up!\n        this.setState({ essay_submitted: true })\n    }\n\n    wordCount() {\n        return (this.state.value).split(\" \").length;\n    }\n\n    render() {\n        return(\n            <div className='FreeResponeEssay'>\n                <h2>Here is the free response section.</h2>\n                <form onSubmit={this.handleSubmit}>\n                <label> {/* Figure out what <label /> is for */}\n                    <p>Here, you can write about your feelings. Please write at least a dozen words.</p>\n                    <textarea \n                        value={this.state.value}\n                        onChange={this.handleChange}\n                        onClick={this.handleClick}\n                        onBlur={this.handleBlur}\n                        rows=\"10\" \n                        cols=\"79\"\n                        id=\"essay\" name=\"essay\"\n                    />\n                    {/* Insert word count feature here. */}\n                    <p>Current word count is approximately {this.wordCount()} words.</p>\n                    {!this.state.essay_submitted ? \n                        <p>Remember to click the Submit button to submit your essay!</p> \n                        : null }\n                </label> <br />\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>\n                {this.state.essay_submitted && \n                    <p className=\"Success\">Your essay has been submitted!</p>}\n            </div>\n        );\n    }\n}\nexport default FreeResponseEssay;","import React from 'react';\nimport './ScoreBox.css';\n\nclass ScoreBox extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            score:0,\n            scoreShowingp:false // p is for predicate\n        }\n\n        this.calculateScore = this.calculateScore.bind(this);\n        this.toggleShowScore = this.toggleShowScore.bind(this);\n    }\n\n    calculateScore () {\n        // Data structure for this thing is different from the response object\n        // So here is a hacky way of getting easily comparable objects\n        let questions = {}\n        this.props.questions.forEach((currentValue, index) => {\n            let foo = \"q\" + [index];\n            questions[foo] = currentValue.correct;\n        })\n        // Score calculation is (number correct) / (total possible)\n        let responses = this.props.responses;\n        let my_score = 0;\n        let total_possible = Object.keys(questions).length;\n\n        for (let key in responses) {\n            (responses[key] === questions[key]) && (my_score+=1);\n        }\n        this.setState({score:my_score/total_possible});\n    }\n\n    toggleShowScore () {\n        this.calculateScore(); // First update score calculation,\n        // this.setState({scoreShowingp:true}); // then make it visible.\n        this.props.toggleShowScore();\n    }\n\n    render() {\n        return (\n            <div className=\"ScoreBox\">\n                <h2>Finished?</h2>\n                <p>I give out grades.</p>\n\n                <button\n                    className='Choice'\n                    onClick={this.toggleShowScore}\n                >\n                    {!this.props.showingScore ? \"How'd I do?\" : \"Hide score\"}\n                </button>\n\n                <button\n                    className='Choice'\n                    onClick={this.props.reset} \n                >\n                    Reset multiple choice\n                </button>\n\n                <div \n                    className={this.props.showingScore ? \n                        \"ScoreReport\" : \"ScoreReport hidden\"}\n                >\n                <h2>Evaluation</h2>\n                <p>Your score: {(this.state.score*100).toFixed(2)}%</p>\n                <p>Scroll back up to the questions to see the correct answers.</p>\n\n                <p>Here is what you wrote for your essay: </p>\n                \n                <div className=\"EssayDisplay\">{this.props.essay}</div>\n\n                <p>Seems okay to me.</p>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ScoreBox;","import React, { Component } from 'react'\nimport './Exam.css'\nimport QuestionList from './QuestionList'\nimport FreeResponseEssay from './FreeResponseEssay'\nimport ScoreBox from './ScoreBox'\n\n// We can shuffle the questions and answer choices and stuff on the backend\n// By default, all the right answers are the second choice (we start counting at 0)\nconst questions = [\n    {question:'Why did the chicken cross the road?', choices:['To walk into a bar', 'To get to the other side.', 'For kicks and giggles.','I know why the caged bird sings.'], correct: 1},\n    {question:'What is the capital of california?', choices:['Sacramento','California','Irvine','47'], correct: 1},\n    {question:'Which of the following is a social construct?', choices:['Gravity','The will of the people','Butter','Bitcoin'], correct: 1},\n    {question:'Foo is to bar as Sam is to ____', choices:['ple','sung','e','po'], correct: 1},\n    {question:'How many moons does Earth have?', choices:['zero','one','two','three'], correct: 1}\n]\n\nclass Exam extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            questions:questions,\n            responses:{},\n            showingScore:false,\n        }\n        this.selectChoice = this.selectChoice.bind(this)\n        this.toggleShowScore = this.toggleShowScore.bind(this)\n        this.resetExam = this.resetExam.bind(this)\n    }\n\n    /* Reset entire exam */\n    resetExam() {\n        this.setState({responses:{}});\n        this.setState({showingScore:false});\n        // this.setState({essay:''});\n    }\n\n    selectChoice(questionIndex,choice) {\n        let newResponses = Object.assign({}, this.state.responses);\n        newResponses['q' + questionIndex] = choice;\n        this.setState({responses:newResponses});\n    }\n\n    toggleShowScore(){\n        this.state.showingScore ? \n            this.setState({showingScore:false}) : this.setState({showingScore:true})\n    }\n\n    render() {\n        return(\n            <div>\n                <h2>Instructions</h2>\n                <p>Do this. Do that. Bark, bark, bark. Did you hear what I said? \n                    Mumble, grumble.</p>\n\n                <h2>Here are the multiple choice questions.</h2>\n\n                <p>Confine your thoughts to the provided answer choices. \n                   You may look <em>up</em> for inspiration, <em>down</em> in \n                   desperation, but you may NOT look <em>side to side</em> for \n                   consolation.\n                </p>\n\n                <QuestionList \n                    questions={this.state.questions} \n                    responses={this.state.responses}\n                    selectChoice={(qid,choice) => this.selectChoice(qid,choice) }\n                    showingScore={this.state.showingScore}\n                />\n\n                <FreeResponseEssay \n                    initial_text={\"I think that I am clever because...\"}\n                    onSubmit={essayText => {this.setState({essay:essayText})}}\n                />\n\n                <ScoreBox \n                    questions={this.state.questions}\n                    responses={this.state.responses}\n                    essay={this.state.essay}\n                    toggleShowScore={this.toggleShowScore}\n                    showingScore={this.state.showingScore}\n                    reset={this.resetExam}\n                />\n            </div>\n        )\n    }\n}\n\n\nexport default Exam","import React, { Component } from 'react';\nimport './App.css';\nimport Exam from './Exam.js'\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App-header\">\n        <h1>Sample Exam</h1>\n        <Exam />\n      </div>\n    );\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}